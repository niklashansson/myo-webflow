{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/analytics/subscription.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n// @ts-expect-error \"Data Layer\"\nwindow.dataLayer = window.dataLayer || [];\nwindow.Webflow ||= [];\n\nwindow.Webflow.push(async () => {\n  // Check url\n  const params = new URLSearchParams(window.location.href);\n  const fromCheckout = params.get('fromCheckout');\n  const msPriceId = params.get('msPriceId');\n  if (!fromCheckout || !msPriceId) return;\n\n  // Fetch the member's planConnections from local storage\n  const memberDataFromLocalStorage = localStorage.getItem('_ms-mem');\n  if (!memberDataFromLocalStorage) return;\n\n  const memberData = JSON.parse(memberDataFromLocalStorage);\n  if (!memberData) return;\n\n  const { planConnections } = memberData;\n  if (!planConnections.length) return;\n\n  const confirmedPlan = planConnections.find((p: any) => validatePlan(p, msPriceId));\n  if (confirmedPlan) {\n    pushToDataLayer(memberData, confirmedPlan.planId);\n  }\n});\n\nfunction validatePlan(plan: any, urlPriceId: string) {\n  if (!plan.payment) return;\n\n  const isActive = plan.active;\n  const isValidPriceId = plan.payment.priceId === urlPriceId;\n  const isPaid = plan.payment.status === 'PAID';\n  const isNotCancelled = !plan.payment.cancelAtDate;\n  // const isConfirmedRecently = isRecentPlan(plan.payment.lastBillingDate);\n\n  return isActive && isValidPriceId && isPaid && isNotCancelled;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\nasync function pushToDataLayer(memberData: any, planId: string) {\n  const event = {\n    event: 'myo-new-subscription',\n    newInstructionsSubscription: {\n      memberEmail: memberData.auth.email,\n      memberId: memberData.id,\n      memberFirstName: memberData.customFields['first-name'],\n      memberLastName: memberData.customFields['last-name'],\n      memberLocation: memberData.customFields?.location,\n      stripeCustomerId: memberData.stripeCustomerId,\n      planId,\n    },\n  };\n\n  // @ts-expect-error \"data layer\"\n  window.dataLayer.push(event);\n  console.log('Pushed to data layer!');\n}\n\n// function isRecentPlan(timestamp: number) {\n//   // Get the current time in seconds since the epoch\n//   const currentTime = Math.floor(Date.now() / 1000);\n\n//   // Calculate the difference in seconds\n//   const timeDifference = currentTime - timestamp;\n\n//   // Check if the difference is less than or equal to 5 minutes (300 seconds)\n//   return timeDifference <= 900;\n// }\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACE7F,SAAO,YAAY,OAAO,aAAa,CAAC;AACxC,SAAO,YAAY,CAAC;AAEpB,SAAO,QAAQ,KAAK,YAAY;AAE9B,UAAM,SAAS,IAAI,gBAAgB,OAAO,SAAS,IAAI;AACvD,UAAM,eAAe,OAAO,IAAI,cAAc;AAC9C,UAAM,YAAY,OAAO,IAAI,WAAW;AACxC,QAAI,CAAC,gBAAgB,CAAC;AAAW;AAGjC,UAAM,6BAA6B,aAAa,QAAQ,SAAS;AACjE,QAAI,CAAC;AAA4B;AAEjC,UAAM,aAAa,KAAK,MAAM,0BAA0B;AACxD,QAAI,CAAC;AAAY;AAEjB,UAAM,EAAE,gBAAgB,IAAI;AAC5B,QAAI,CAAC,gBAAgB;AAAQ;AAE7B,UAAM,gBAAgB,gBAAgB,KAAK,CAAC,MAAW,aAAa,GAAG,SAAS,CAAC;AACjF,QAAI,eAAe;AACjB,sBAAgB,YAAY,cAAc,MAAM;AAAA,IAClD;AAAA,EACF,CAAC;AAED,WAAS,aAAa,MAAW,YAAoB;AACnD,QAAI,CAAC,KAAK;AAAS;AAEnB,UAAM,WAAW,KAAK;AACtB,UAAM,iBAAiB,KAAK,QAAQ,YAAY;AAChD,UAAM,SAAS,KAAK,QAAQ,WAAW;AACvC,UAAM,iBAAiB,CAAC,KAAK,QAAQ;AAGrC,WAAO,YAAY,kBAAkB,UAAU;AAAA,EACjD;AAGA,iBAAe,gBAAgB,YAAiB,QAAgB;AAC9D,UAAM,QAAQ;AAAA,MACZ,OAAO;AAAA,MACP,6BAA6B;AAAA,QAC3B,aAAa,WAAW,KAAK;AAAA,QAC7B,UAAU,WAAW;AAAA,QACrB,iBAAiB,WAAW,aAAa,YAAY;AAAA,QACrD,gBAAgB,WAAW,aAAa,WAAW;AAAA,QACnD,gBAAgB,WAAW,cAAc;AAAA,QACzC,kBAAkB,WAAW;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAGA,WAAO,UAAU,KAAK,KAAK;AAC3B,YAAQ,IAAI,uBAAuB;AAAA,EACrC;",
  "names": []
}
